---
title: "Why I should use async/await?" 
description: The way from callback to async in a nutshell
img: https://images.unsplash.com/photo-1526367790999-0150786686a2?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1502&q=80
alt: deliver image
author: 
  name: Nick
  bio: I am a software developer who spends most of his spare time working on open source projects. I also like taking pictures and playing table football.
  img: https://avatars1.githubusercontent.com/u/544436?s=460&u=f229b588fbb1b79aab2ab6f029cec5e6e7909af1&v=4
tags: 
  - JavaScript
createdAt: 2021-01-07
updatedAt: 2021-01-07
---

## ☝️ Why I should use async/await?

Vielleicht hast du schon einmal von der Callback-Hell gehört oder sie erlebt. In JavaScript werden häufig Funktionen übergeben, die nach einer längeren Bearbeitungsdauer ausgeführt werden sollen. Spätestens wenn mehre nach einander ausgeführt werden und eine vernüpftige Fehlerbehandlung durchgeführt werden soll, wird der Code unübersichtlich.

```javascript
// Example code for nested callbacks
$.ajax("example.php")
  .done(function() {
    alert("success");
  })
  .fail(function() {
    $.ajax("fail.php")
      .done(function() {
        alert("success");
      })
  })
```

Um dieser Callback-Hell zu entgehen wurden in JS die Promises eingeführt. Ein Promise stellt eine Datenstruktur bereit, über die 
